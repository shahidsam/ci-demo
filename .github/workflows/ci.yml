name: Advanced Multi-Env CI/CD

permissions:
  contents: read
  packages: write


on:
  push:
    branches:
      - main
      - develop
      - release/*

jobs:
  # ---- Test ----
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - run: pytest --junitxml==pytest.xml
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pytest-report
          path: pytest.xml

  # ---- Build ----
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/ci-demo:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/ci-demo:latest


  # ---- Deploy to Dev ----
  deploy-dev:
    needs: build
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            docker pull ghcr.io/${{ github.repository_owner }}/ci-demo:${{ github.sha }}
            docker stop ci-demo || true
            docker rm ci-demo || true
            docker run -d --name ci-demo -p 5000:5000 ghcr.io/${{ github.repository_owner }}/ci-demo:${{ github.sha }}
          EOF

  # ---- Deploy to Staging ----
  deploy-staging:
    needs: deploy-dev
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            docker pull ghcr.io/${{ github.repository_owner }}/ci-demo:${{ github.sha }}
            docker stop ci-demo || true
            docker rm ci-demo || true
            docker run -d --name ci-demo -p 5001:5000 ghcr.io/${{ github.repository_owner }}/ci-demo:${{ github.sha }}
          EOF

  # ---- Deploy to Prod ----
  deploy-prod:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production   # approval gate applied here
    steps:
      - uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            docker pull ghcr.io/${{ github.repository_owner }}/ci-demo:${{ github.sha }}
            docker stop ci-demo || true
            docker rm ci-demo || true
            docker run -d --name ci-demo -p 80:5000 ghcr.io/${{ github.repository_owner }}/ci-demo:${{ github.sha }}
          EOF

  # ---- Slack Notification ----
  notify:
    needs: [deploy-prod]
    runs-on: ubuntu-latest
    environment: production
    if: always()
    steps:
      - name: Notify Slack
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload: |
            {
              "text": " Deployment complete for *Production*!\nEnvironment: Production\nCommit: ${{ github.sha }}\nStatus: ${{ job.status }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

