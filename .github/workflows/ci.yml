name: CI, Build & Deploy

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - run: pytest --junitxml=pytest.xml
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pytest-report
          path: pytest.xml

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          push-by-digest: true 
          tags: |
            ghcr.io/${{ github.repository_owner }}/ci-demo:staging
            ghcr.io/${{ github.repository_owner }}/ci-demo:prod
        #   tags: ghcr.io/${{ github.repository_owner }}/ci-demo:latest

#   deploy-to-test:
#     needs: build-and-push
#     runs-on: ubuntu-latest
#     steps:
#       - name: Setup SSH
#         uses: webfactory/ssh-agent@v0.8.0
#         with:
#           ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

#       - name: Deploy app to Test Server
#         run: |
#           ssh -o StrictHostKeyChecking=no ${{ secrets.TEST_SERVER_USER }}@${{ secrets.TEST_SERVER_IP }} << 'EOF'
#             docker pull ghcr.io/${{ github.repository_owner }}/ci-demo:latest
#             docker stop ci-demo || true
#             docker rm ci-demo || true
#             docker run -d --name ci-demo -p 5000:5000 ghcr.io/${{ github.repository_owner }}/ci-demo:latest
#           EOF
  deploy-to-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy app to Staging (Port 5000)
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            docker pull ghcr.io/${{ github.repository_owner }}/ci-demo:staging
            docker stop ci-demo-staging || true
            docker rm ci-demo-staging || true
            docker run -d --name ci-demo-staging -p 5000:5000 ghcr.io/${{ github.repository_owner }}/ci-demo:staging
          EOF

  deploy-to-production:
    needs: deploy-to-staging
    runs-on: ubuntu-latest
    environment: production   # requires approval in GitHub UI
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy app to Production (Port 80)
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            docker pull ghcr.io/${{ github.repository_owner }}/ci-demo:prod
            docker stop ci-demo-prod || true
            docker rm ci-demo-prod || true
            docker run -d --name ci-demo-prod -p 80:5000 ghcr.io/${{ github.repository_owner }}/ci-demo:prod
          EOF

